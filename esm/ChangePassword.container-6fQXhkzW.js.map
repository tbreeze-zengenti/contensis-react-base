{"version":3,"file":"ChangePassword.container-6fQXhkzW.js","sources":["../src/routing/util/find-contenttype-mapping.ts","../src/user/transformations/mapClientCredentials.ts","../src/user/util/ContensisManagementApi.ts","../src/user/util/OidcUserManager.ts","../src/user/util/LoginHelper.class.ts","../src/user/redux/sagas/login.ts","../src/user/redux/actions.ts","../src/user/hooks/useLogin.ts","../src/user/containers/Login.container.js","../src/user/hooks/useRegistration.js","../src/user/containers/Registration.container.js","../src/user/hooks/useForgotPassword.js","../src/user/containers/ForgotPassword.container.js","../src/user/hooks/useChangePassword.js","../src/user/containers/ChangePassword.container.js"],"sourcesContent":["import { ContentTypeMapping } from '~/models';\n\nexport const findContentTypeMapping = (\n  ContentTypeMappings: ContentTypeMapping[],\n  contentTypeId: string\n) => ContentTypeMappings.find(ct => ct.contentTypeID === contentTypeId);\n","import { Client } from 'contensis-management-api';\nimport { mapJson } from '~/util/json-mapper';\nimport { ManagementApiClientCredentials } from '../util/ContensisManagementApi';\n\nconst clientCredentials = {\n  bearerToken: 'bearerToken',\n  bearerTokenExpiryDate: ({ bearerTokenExpiryDate }) =>\n    bearerTokenExpiryDate.toISOString(),\n  refreshToken: 'refreshToken',\n  refreshTokenExpiryDate: ({ refreshTokenExpiryDate }) =>\n    refreshTokenExpiryDate.toISOString(),\n  contensisClassicToken: 'contensisClassicToken',\n};\nexport default (obj: Client) =>\n  mapJson(obj, clientCredentials) as ManagementApiClientCredentials;\n","export type ManagementApiClientCredentials = {\n  bearerToken?: string;\n  bearerTokenExpiryDate?: Date;\n  refreshToken?: string;\n  refreshTokenExpiryDate?: Date;\n  contensisClassicToken?: string;\n  username?: string;\n  password?: string;\n};\n\nexport const getManagementApiClient = async ({\n  bearerToken,\n  bearerTokenExpiryDate,\n  refreshToken,\n  refreshTokenExpiryDate,\n  contensisClassicToken,\n  username,\n  password,\n}: ManagementApiClientCredentials) => {\n  const rootUrl = SERVERS.cms || SERVERS.api; /* global SERVERS */\n  const projectId = PROJECTS[0].id; /* global PROJECTS */\n\n  let config = {};\n  if (refreshToken) {\n    config = {\n      clientType: 'contensis_classic_refresh_token',\n      clientDetails: {\n        refreshToken,\n      },\n    };\n  } else {\n    config = {\n      clientType: 'contensis_classic',\n      clientDetails: {\n        username,\n        password,\n      },\n    };\n  }\n\n  let { Client } = await import('contensis-management-api');\n\n  if (typeof window === 'undefined') {\n    const { UniversalClient } = await import('contensis-management-api');\n    Client = UniversalClient;\n  }\n\n  const client = Client.create({\n    ...config,\n    projectId,\n    rootUrl,\n  });\n\n  if (bearerToken) client.bearerToken = bearerToken;\n  if (bearerTokenExpiryDate)\n    client.bearerTokenExpiryDate = bearerTokenExpiryDate;\n  if (refreshToken) client.refreshToken = refreshToken;\n  if (refreshTokenExpiryDate)\n    client.refreshTokenExpiryDate = refreshTokenExpiryDate;\n  if (contensisClassicToken)\n    (client as any).contensisClassicToken = contensisClassicToken;\n\n  return client;\n};\n","import { UserManagerSettings } from 'oidc-client';\n\nconst context = (\n  typeof window != 'undefined' ? window : global\n) as typeof globalThis & {\n  WSFED_LOGIN: string;\n};\n\nconst requireOidc =\n  process.env.NODE_ENV === 'development'\n    ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n    : context.WSFED_LOGIN === 'true';\n\nconst servers = SERVERS; /* global SERVERS */\n\nexport const userManagerConfig =\n  typeof window !== 'undefined'\n    ? {\n        authority: `${servers.cms}/authenticate/`,\n        client_id: 'WebsiteAdfsClient',\n        redirect_uri: window.location.toString(),\n        post_logout_redirect_uri: window.location.toString(),\n        response_type: 'id_token',\n        scope: 'openid',\n        filterProtocolClaims: false,\n      }\n    : {};\n\nexport const createUserManager = async (config: UserManagerSettings) => {\n  if (typeof window !== 'undefined' && requireOidc) {\n    try {\n      const { UserManager } = await import(\n        /* webpackChunkName: \"oidcclient\" */ 'oidc-client'\n      );\n      return new UserManager(config);\n    } catch (e) {\n      console.error('Exception in createUserManager: ', e);\n    }\n  } else return;\n};\n","import { to } from 'await-to-js';\n\nimport {\n  ManagementApiClientCredentials,\n  getManagementApiClient,\n} from './ContensisManagementApi';\n\nimport mapClientCredentials from '../transformations/mapClientCredentials';\nimport { createUserManager, userManagerConfig } from './OidcUserManager';\nimport { LOGIN_COOKIE, REFRESH_TOKEN_COOKIE } from './CookieConstants';\nimport { AuthenticationState, UserWithGroups } from '../state';\nimport { Client } from 'contensis-management-api';\nimport { CookieHelper } from './CookieHelper.class';\n\nconst context = (\n  typeof window != 'undefined' ? window : global\n) as typeof globalThis & {\n  WSFED_LOGIN: any;\n};\n\nexport class LoginHelper {\n  static CMS_URL = SERVERS.cms /* global SERVERS */;\n  static WSFED_LOGIN =\n    process.env.NODE_ENV === 'development'\n      ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n      : context.WSFED_LOGIN === 'true';\n  static LOGIN_ROUTE = '/account/login';\n  static ACCESS_DENIED_ROUTE = '/account/access-denied';\n\n  cookies: CookieHelper;\n\n  constructor(cookies?: CookieHelper) {\n    this.cookies = cookies || new CookieHelper();\n  }\n\n  static withCookies = (cookieHelper: CookieHelper) =>\n    new LoginHelper(cookieHelper);\n\n  static GetUserDetails = async (\n    client: Client\n  ): Promise<[Error | null, UserWithGroups | undefined]> => {\n    const [userError, user] = await to(client.security.users.getCurrent());\n    if (user && user.id) {\n      const [groupsError, groupsResult] = await to(\n        client.security.users.getUserGroups({\n          userId: user.id,\n          includeInherited: true,\n          pageOptions: { pageSize: 100 },\n        })\n      );\n      // Set groups attribute in user object to be the items\n      // array from the getUserGroups result\n      if (groupsResult && groupsResult.items)\n        (user as UserWithGroups).groups = groupsResult.items;\n\n      // If groups call fails then log the error but allow the user to login still\n      // eslint-disable-next-line no-console\n      if (groupsError) console.log(groupsError);\n    }\n    return [userError, user as UserWithGroups];\n  };\n\n  static ClientRedirectToHome(location?: Location) {\n    if (typeof window != 'undefined') {\n      let url = '/';\n      if (location) {\n        const { search, hash } = location;\n        url = search ? `${url}${search}` : url;\n        url = hash ? `${url}${hash}` : url;\n      }\n      window.location.href = url;\n    }\n  }\n\n  static async ClientRedirectToSignInPage(redirectPath?: string) {\n    if (typeof location === 'undefined') return;\n    if (LoginHelper.WSFED_LOGIN) {\n      await LoginHelper.WsFedLogout();\n      await LoginHelper.WsFedLogin();\n    } else {\n      // Standard Contensis Login\n      let url = LoginHelper.LOGIN_ROUTE;\n      if (typeof redirectPath === 'string')\n        url = `${url}?redirect_uri=${redirectPath}`;\n      if (\n        typeof location !== 'undefined' &&\n        redirectPath !== LoginHelper.LOGIN_ROUTE\n      )\n        location.replace(url);\n    }\n  }\n\n  static GetAccessDeniedRoute(originalPath) {\n    let url = LoginHelper.ACCESS_DENIED_ROUTE;\n    if (originalPath !== url && typeof originalPath === 'string')\n      url = `${url}?original_uri=${originalPath}`;\n    return url;\n  }\n\n  static ClientRedirectToAccessDeniedPage(originalPath) {\n    if (typeof location !== 'undefined')\n      location.href = LoginHelper.GetAccessDeniedRoute(originalPath);\n  }\n\n  static ClientRedirectToPath(redirectPath) {\n    if (typeof redirectPath === 'string') {\n      if (typeof location !== 'undefined') window.location.href = redirectPath;\n    } else LoginHelper.ClientRedirectToHome();\n  }\n\n  static async WsFedLogin(redirectUri?: string) {\n    const userManager = await createUserManager(userManagerConfig);\n    userManager?.signinRedirect({\n      scope: 'openid',\n      response_type: 'id_token',\n      redirect_uri: redirectUri || window.location.toString(),\n    });\n  }\n\n  static RemoveSecurityTokenQuery() {\n    const params = new URLSearchParams(window.location.search);\n    if (params.has('securitytoken') || params.has('securityToken')) {\n      params.delete('securitytoken');\n      params.delete('securityToken');\n      window.location.href = `${window.location.pathname}${\n        params.toString() ? `?${params}` : ''\n      }`;\n    }\n  }\n\n  static async WsFedLogout(redirectPath?: string) {\n    await fetch(\n      `${LoginHelper.CMS_URL}/authenticate/logout?jsonResponseRequired=true`,\n      {\n        credentials: 'include',\n      }\n    );\n    if (redirectPath) {\n      window.location.href = redirectPath;\n    } else {\n      // Explicitly check and remove any stale\n      // security token that may be in the query string\n      LoginHelper.RemoveSecurityTokenQuery();\n    }\n  }\n\n  static async GetCredentialsForSecurityToken(securityToken: string) {\n    const [error, response] = await to(\n      fetch(`${LoginHelper.CMS_URL}/REST/Contensis/Security/IsAuthenticated`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          securityToken: encodeURIComponent(securityToken),\n        }),\n      })\n    );\n    if (error) return [{ message: 'Failed to fetch credentials' }];\n    if (response.ok) {\n      const [parseError, body] = await to(response.json());\n      if (parseError) return [parseError];\n\n      const { LogonResult, ApplicationData = [] } = body;\n      if (LogonResult !== 0) {\n        console.info(`Security token is invalid - LogonResult: ${LogonResult}`);\n        return [\n          { message: 'Security token is invalid', data: ApplicationData },\n        ];\n      }\n      if (ApplicationData.length > 0) {\n        let refreshToken;\n        ApplicationData.forEach(item => {\n          if (item.Key === 'ContensisSecurityRefreshToken')\n            refreshToken = item.Value;\n        });\n        if (!refreshToken) {\n          return [\n            {\n              message:\n                'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n            },\n          ];\n        }\n        return [undefined, refreshToken];\n      } else {\n        return [\n          {\n            message:\n              'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n          },\n        ];\n      }\n    } else {\n      return [\n        {\n          message: `Fetch credentials error: ${response.status} ${response.statusText}`,\n        },\n      ];\n    }\n  }\n\n  // static isZengentiStaff(email) {\n  //   const emailRefs = ['@zengenti', '@contensis'];\n\n  //   return emailRefs.some(emailRef => {\n  //     if (email.includes(emailRef)) {\n  //       return true;\n  //     }\n  //   });\n  // }\n\n  SetLoginCookies({\n    contensisClassicToken,\n    refreshToken,\n  }: {\n    contensisClassicToken?: string;\n    refreshToken?: string;\n  }) {\n    console.info(\n      'SetLoginCookies:',\n      LOGIN_COOKIE,\n      contensisClassicToken,\n      REFRESH_TOKEN_COOKIE,\n      refreshToken\n    );\n\n    if (contensisClassicToken)\n      this.cookies.SetCookie(LOGIN_COOKIE, contensisClassicToken);\n\n    if (refreshToken)\n      this.cookies.SetCookie(REFRESH_TOKEN_COOKIE, refreshToken);\n  }\n\n  GetCachedCredentials() {\n    return {\n      bearerToken: null,\n      bearerTokenExpiryDate: null,\n      refreshToken: this.cookies.GetCookie(REFRESH_TOKEN_COOKIE),\n      refreshTokenExpiryDate: null,\n      contensisClassicToken: this.cookies.GetCookie(LOGIN_COOKIE),\n      securityToken: null,\n    };\n  }\n\n  ClearCachedCredentials() {\n    this.cookies.DeleteCookie(LOGIN_COOKIE);\n    this.cookies.DeleteCookie(REFRESH_TOKEN_COOKIE);\n\n    if (LoginHelper.WSFED_LOGIN && typeof window !== 'undefined') {\n      // remove any oidc keys left over in localStorage\n      const { localStorage } = window;\n      const keys: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (typeof key === 'string' && key.startsWith('oidc.')) keys.push(key);\n      }\n      keys.forEach(key => localStorage.removeItem(key));\n    }\n  }\n\n  async LoginUser({\n    username,\n    password,\n    clientCredentials,\n  }: {\n    username?: string;\n    password?: string;\n    clientCredentials?: ManagementApiClientCredentials;\n  }) {\n    let credentials = clientCredentials;\n    let authenticationState: AuthenticationState = {\n      clientCredentials: null,\n      isAuthenticated: false,\n      isAuthenticationError: false,\n      isError: false,\n    };\n    let transientClient: Client | null = null;\n    let user;\n\n    if (username && password) {\n      // Get a management client with username and password\n      transientClient = await getManagementApiClient({\n        username,\n        password,\n      });\n\n      // Ensure the client has requested a bearer token\n      const [loginError, clientBearerToken] = await to(\n        transientClient.ensureBearerToken()\n      );\n\n      // Problem getting token with username and password\n      if (loginError) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: loginError.message || null,\n          isAuthenticated: false,\n          isAuthenticationError: loginError.name.includes(\n            'ContensisAuthenticationError'\n          ),\n          isError: true,\n        };\n        this.ClearCachedCredentials();\n      }\n\n      // Got a token using username and password\n      if (clientBearerToken) {\n        // Set credentials so we can continue to GetUserDetails\n        const clientCredentials = mapClientCredentials(transientClient);\n        this.SetLoginCookies(clientCredentials);\n        authenticationState = {\n          clientCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n        credentials = clientCredentials;\n      }\n    }\n\n    // If we have credentials supplied by a successful username and password login\n    // or clientCredentials supplied in the options argument we can continue to\n    // fetch the user's details\n    if (credentials) {\n      const client =\n        transientClient || (await getManagementApiClient(credentials));\n      const [error, userDetails] = await LoginHelper.GetUserDetails(client);\n\n      if (error) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: error.message,\n          isAuthenticated: false,\n          isAuthenticationError: false,\n          isError: true,\n        };\n        this.ClearCachedCredentials();\n      } else {\n        // Ensure we get latest refreshToken and contensisClassicToken from the latest client\n        const latestCredentials = mapClientCredentials(client);\n        this.SetLoginCookies(latestCredentials);\n\n        user = userDetails;\n        authenticationState = {\n          clientCredentials: latestCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    return { authenticationState, user };\n  }\n\n  LogoutUser(redirectPath?: string) {\n    this.ClearCachedCredentials();\n    if (LoginHelper.WSFED_LOGIN) {\n      LoginHelper.WsFedLogout(redirectPath);\n    } else {\n      if (redirectPath) LoginHelper.ClientRedirectToPath(redirectPath);\n      else LoginHelper.ClientRedirectToSignInPage();\n    }\n  }\n}\n","import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport {\n  SET_AUTHENTICATION_STATE,\n  LOGIN_USER,\n  LOGOUT_USER,\n  VALIDATE_USER,\n} from '../types';\nimport {\n  selectUserIsAuthenticated,\n  selectClientCredentials,\n  selectUserGroups,\n} from '../selectors';\n\nimport { setRoute } from '~/routing/redux/actions';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\nimport { findContentTypeMapping } from '~/routing/util/find-contenttype-mapping';\n\nimport mapClientCredentials from '~/user/transformations/mapClientCredentials';\n\nimport { getManagementApiClient } from '~/user/util/ContensisManagementApi';\nimport { LoginHelper } from '~/user/util/LoginHelper.class';\nimport { matchUserGroup } from '~/user/util/matchGroups';\nimport { queryParams } from '~/util/navigation';\n\nexport const loginSagas = [\n  takeEvery(LOGIN_USER, loginUserSaga),\n  takeEvery(LOGOUT_USER, logoutUserSaga),\n  takeEvery(VALIDATE_USER, validateUserSaga),\n  takeEvery(SET_AUTHENTICATION_STATE, redirectAfterSuccessfulLoginSaga),\n];\n\nexport function* handleRequiresLoginSaga(action: any) {\n  const {\n    cookies,\n    entry,\n    path,\n    requireLogin,\n    routes: { ContentTypeMappings },\n    staticRoute,\n  } = action;\n  let userLoggedIn = yield select(selectUserIsAuthenticated);\n\n  // Check for a securityToken in querystring\n  const currentQs = queryParams(yield select(selectCurrentSearch));\n  const securityToken = currentQs.securityToken || currentQs.securitytoken;\n\n  // Check if any of the defined routes have \"requireLogin\" attribute\n  const { requireLogin: authRoute } = (staticRoute && staticRoute.route) || {};\n  const { requireLogin: authContentType } =\n    (entry &&\n      findContentTypeMapping(ContentTypeMappings, entry?.sys?.contentTypeId)) ||\n    {};\n\n  // If requireLogin, authRoute or authContentType has been specified as an\n  // array of groups we can merge all the arrays and match on any group supplied\n  const routeRequiresGroups = [\n    ...((Array.isArray(authContentType) && authContentType) || []),\n    ...((Array.isArray(authRoute) && authRoute) || []),\n    ...((Array.isArray(requireLogin) && requireLogin) || []),\n  ];\n  const routeRequiresLogin = !!authContentType || !!authRoute || !!requireLogin;\n\n  if (!userLoggedIn) {\n    // If cookies or securityToken are found on any route change\n    // always validate and login the user\n    if (routeRequiresLogin) {\n      console.info(`Route requires login: ${path}`);\n      // If routeRequiresLogin do a blocking call that returns userLoggedIn\n      userLoggedIn = yield call(validateUserSaga, {\n        cookies,\n        securityToken,\n      });\n      console.info(`User logged in: ${userLoggedIn}`);\n    }\n    // otherwise do a non blocking put to handle validation in the background\n    else yield put({ type: VALIDATE_USER, cookies, securityToken });\n  }\n\n  if (routeRequiresLogin) {\n    // If a security token is in the querystring and we are not already\n    // logged in something is wrong and we won't bother going on another redirect loop\n    if (!userLoggedIn && !securityToken) {\n      LoginHelper.ClientRedirectToSignInPage(action.location.pathname);\n    } else if (routeRequiresGroups.length > 0) {\n      const userGroups = yield select(selectUserGroups, 'js');\n      const groupMatch = matchUserGroup(userGroups, routeRequiresGroups);\n\n      if (!groupMatch)\n        LoginHelper.ClientRedirectToAccessDeniedPage(action.location.pathname);\n    }\n  }\n\n  return userLoggedIn;\n}\n\nfunction* validateUserSaga({ cookies, securityToken }: any) {\n  const login = LoginHelper.withCookies(cookies);\n  // Check for refreshToken in cookies\n  let clientCredentials = login.GetCachedCredentials();\n\n  if (\n    securityToken ||\n    clientCredentials.securityToken ||\n    clientCredentials.refreshToken\n  ) {\n    // We only attempt to validate the user if one of the stored\n    // tokens are found, in this case we set loading state manually\n    // so we don't need to set and unset loading if there are no stored\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        isLoading: true,\n      },\n    });\n    // If we have just a security token we will call a CMS endpoint\n    // and provide us with a RefreshToken cookie we can use during login\n    if (\n      securityToken ||\n      (clientCredentials.securityToken && !clientCredentials.refreshToken)\n    ) {\n      const [error, refreshToken] =\n        yield LoginHelper.GetCredentialsForSecurityToken(\n          securityToken || clientCredentials.securityToken\n        );\n      if (refreshToken) {\n        // Set cookies and reload values\n        login.SetLoginCookies({\n          contensisClassicToken: securityToken,\n          refreshToken,\n        });\n        clientCredentials = login.GetCachedCredentials();\n      }\n      if (error) {\n        login.ClearCachedCredentials();\n        yield put({\n          type: SET_AUTHENTICATION_STATE,\n          authenticationState: {\n            isError: true,\n            errorMessage:\n              error?.message ||\n              (error && 'toString' in error && error.toString()),\n          },\n        });\n      }\n    }\n\n    // Log the user in if a refreshToken is found\n    if (clientCredentials.refreshToken) {\n      console.info(\n        `Login user with refreshToken ${clientCredentials.refreshToken}`\n      );\n      yield call(loginUserSaga, {\n        clientCredentials,\n        cookies: login.cookies,\n      });\n    }\n  }\n\n  // Tell any callers have we successfully logged in?\n  return yield select(selectUserIsAuthenticated);\n}\n\nfunction* loginUserSaga(action: any = {}) {\n  const { username, password, clientCredentials, cookies } = action;\n  const login = LoginHelper.withCookies(cookies);\n\n  // If a WSFED_LOGIN site has dispatched the loginUser action\n  // just redirect them to the Identity Provider sign in\n  if (action.type === LOGIN_USER && LoginHelper.WSFED_LOGIN)\n    LoginHelper.ClientRedirectToSignInPage();\n\n  const { authenticationState, user } = yield login.LoginUser({\n    username,\n    password,\n    clientCredentials,\n  });\n\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    authenticationState,\n    user,\n  });\n}\n\nconst removeHostnamePart = path => {\n  // eslint-disable-next-line no-console\n  console.log(path);\n  const relativePath = '/' + path.split('/').splice(3).join('/');\n  // eslint-disable-next-line no-console\n  console.log(relativePath);\n  return relativePath;\n};\n\nfunction* redirectAfterSuccessfulLoginSaga() {\n  const isLoggedIn = yield select(selectUserIsAuthenticated);\n  const { redirect_uri: redirectPath, ReturnURL: assetRedirectPath } =\n    queryParams(yield select(selectCurrentSearch));\n\n  if (isLoggedIn && assetRedirectPath && typeof window != 'undefined') {\n    const path = removeHostnamePart(assetRedirectPath);\n    // This has to be a hard href to get the app to\n    // leave React and hit the server for the IIS hosted assets\n    window.location.href = path;\n    // yield put(setRoute(path)); // does not work in this scenario\n  } else if (isLoggedIn && redirectPath) {\n    yield put(setRoute(redirectPath));\n  }\n}\n\nfunction* logoutUserSaga({ redirectPath, cookies }: any) {\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    user: null,\n  });\n  yield LoginHelper.withCookies(cookies).LogoutUser(redirectPath);\n}\n\nexport function* refreshSecurityToken() {\n  const clientCredentials = yield select(selectClientCredentials, 'js');\n  if (Object.keys(clientCredentials).length > 0) {\n    const client = yield getManagementApiClient(clientCredentials);\n    yield client.authenticate();\n\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        clientCredentials: mapClientCredentials(client),\n      },\n    });\n  }\n}\n","import { action } from '~/redux/util';\nimport {\n  CHANGE_USER_PASSWORD,\n  LOGIN_USER,\n  LOGOUT_USER,\n  REGISTER_USER,\n  REQUEST_USER_PASSWORD_RESET,\n  RESET_USER_PASSWORD,\n} from './types';\nimport { CookieHelper } from '../util/CookieHelper.class';\n\nexport const loginUser = (\n  username: string,\n  password: string,\n  cookies?: CookieHelper\n) => action(LOGIN_USER, { username, password, cookies });\n\nexport const logoutUser = (redirectPath?: string, cookies?: CookieHelper) =>\n  action(LOGOUT_USER, { redirectPath, cookies });\n\nexport const registerUser = (user, mappers) =>\n  action(REGISTER_USER, {\n    user,\n    mappers,\n  });\n\nexport const requestPasswordReset = userEmailObject =>\n  action(REQUEST_USER_PASSWORD_RESET, { userEmailObject });\n\nexport const resetPassword = resetPasswordObject =>\n  action(RESET_USER_PASSWORD, { resetPasswordObject });\n\nexport const changePassword = (userId, currentPassword, newPassword) =>\n  action(CHANGE_USER_PASSWORD, { userId, currentPassword, newPassword });\n","import { useCookies } from 'react-cookie';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginUser, logoutUser } from '../redux/actions';\nimport {\n  selectUser,\n  selectUserIsAuthenticationError,\n  selectUserIsError,\n  selectUserErrorMessage,\n  selectUserIsAuthenticated,\n  selectUserIsLoading,\n} from '../redux/selectors';\nimport { CookieHelper } from '../util/CookieHelper.class';\n\nconst useLogin = () => {\n  const cookies = new CookieHelper(...useCookies());\n\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    loginUser: (username: string, password: string) =>\n      dispatch(loginUser(username, password, cookies)),\n    logoutUser: (redirectPath?: string) =>\n      dispatch(logoutUser(redirectPath, cookies)),\n    errorMessage: select(selectUserErrorMessage),\n    isAuthenticated: select(selectUserIsAuthenticated),\n    isAuthenticationError: select(selectUserIsAuthenticationError),\n    isError: select(selectUserIsError),\n    isLoading: select(selectUserIsLoading),\n    user: select(selectUser),\n    // DEPRECATED: authenticationError is deprecated use isAuthenticationError instead\n    authenticationError: select(selectUserIsAuthenticationError),\n    // DEPRECATED: authenticationErrorMessage is deprecated use errorMessage instead\n    authenticationErrorMessage: select(selectUserErrorMessage),\n    // DEPRECATED: error is deprecated use isError instead\n    error: select(selectUserIsError),\n  };\n};\n\nexport default useLogin;\n","import useLogin from '../hooks/useLogin';\nimport { toJS } from '~/util/ToJs';\n\nconst LoginContainer = ({ children, ...props }) => {\n  const userProps = useLogin(props);\n  return children(userProps);\n};\n\nLoginContainer.propTypes = {};\n\nexport default toJS(LoginContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { registerUser } from '../redux/actions';\nimport {\n  selectUserRegistration,\n  selectUserRegistrationError,\n  selectUserRegistrationIsLoading,\n  selectUserRegistrationIsSuccess,\n} from '../redux/selectors';\n\nconst useRegistration = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    registerUser: (user, mappers) => dispatch(registerUser(user, mappers)),\n    error: select(selectUserRegistrationError),\n    isLoading: select(selectUserRegistrationIsLoading),\n    isSuccess: select(selectUserRegistrationIsSuccess),\n    user: select(selectUserRegistration),\n  };\n};\n\nexport default useRegistration;\n","import useRegistration from '../hooks/useRegistration';\nimport { toJS } from '~/util/ToJs';\n\nconst RegistrationContainer = ({ children, ...props }) => {\n  const userProps = useRegistration(props);\n  return children(userProps);\n};\n\nRegistrationContainer.propTypes = {};\n\nexport default toJS(RegistrationContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { requestPasswordReset, resetPassword } from '../redux/actions';\nimport {\n  selectPasswordResetRequestError,\n  selectPasswordResetRequestSending,\n  selectPasswordResetRequestSent,\n  selectResetPasswordSending,\n  selectResetPasswordSent,\n  selectResetPasswordError,\n} from '../redux/selectors';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\n\nconst useForgotPassword = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    isLoading: select(selectPasswordResetRequestSending),\n    isSuccess: select(selectPasswordResetRequestSent),\n    error: select(selectPasswordResetRequestError),\n    requestPasswordReset: userEmailObject =>\n      dispatch(requestPasswordReset(userEmailObject)),\n\n    setNewPassword: {\n      queryString: select(selectCurrentSearch),\n      isLoading: select(selectResetPasswordSending),\n      isSuccess: select(selectResetPasswordSent),\n      error: select(selectResetPasswordError),\n      submit: resetPasswordObject =>\n        dispatch(resetPassword(resetPasswordObject)),\n    },\n  };\n};\n\nexport default useForgotPassword;\n","import useForgotPassword from '../hooks/useForgotPassword';\nimport { toJS } from '~/util/ToJs';\n\nconst ForgotPasswordContainer = ({ children, ...props }) => {\n  const userProps = useForgotPassword(props);\n  return children(userProps);\n};\n\nForgotPasswordContainer.propTypes = {};\n\nexport default toJS(ForgotPasswordContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changePassword } from '../redux/actions';\nimport {\n  selectChangePasswordSending,\n  selectChangePasswordSent,\n  selectChangePasswordError,\n  selectUserIsAuthenticated,\n  selectUserGuid,\n} from '../redux/selectors';\n\nconst useChangePassword = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    isLoading: select(selectChangePasswordSending),\n    isSuccess: select(selectChangePasswordSent),\n    userId: select(selectUserGuid),\n    isLoggedIn: select(selectUserIsAuthenticated),\n    error: select(selectChangePasswordError),\n    changePassword: (userId, currentPassword, newPassword) =>\n      dispatch(changePassword(userId, currentPassword, newPassword)),\n  };\n};\n\nexport default useChangePassword;\n","import useChangePassword from '../hooks/useChangePassword';\nimport { toJS } from '~/util/ToJs';\n\nconst ChangePasswordContainer = ({ children, ...props }) => {\n  const userProps = useChangePassword(props);\n  return children(userProps);\n};\n\nChangePasswordContainer.propTypes = {};\n\nexport default toJS(ChangePasswordContainer);\n"],"names":["findContentTypeMapping","ContentTypeMappings","contentTypeId","find","ct","contentTypeID","clientCredentials","bearerToken","bearerTokenExpiryDate","toISOString","refreshToken","refreshTokenExpiryDate","contensisClassicToken","obj","mapJson","getManagementApiClient","username","password","rootUrl","SERVERS","cms","api","projectId","PROJECTS","id","config","clientType","clientDetails","Client","window","UniversalClient","client","create","context","global","requireOidc","process","env","NODE_ENV","WSFED_LOGIN","servers","userManagerConfig","authority","client_id","redirect_uri","location","toString","post_logout_redirect_uri","response_type","scope","filterProtocolClaims","createUserManager","UserManager","e","console","error","LoginHelper","constructor","cookies","CookieHelper","ClientRedirectToHome","url","search","hash","href","ClientRedirectToSignInPage","redirectPath","WsFedLogout","WsFedLogin","LOGIN_ROUTE","replace","GetAccessDeniedRoute","originalPath","ACCESS_DENIED_ROUTE","ClientRedirectToAccessDeniedPage","ClientRedirectToPath","redirectUri","userManager","signinRedirect","RemoveSecurityTokenQuery","params","URLSearchParams","has","delete","pathname","fetch","CMS_URL","credentials","GetCredentialsForSecurityToken","securityToken","response","to","method","headers","Accept","body","JSON","stringify","encodeURIComponent","message","ok","parseError","json","LogonResult","ApplicationData","info","data","length","forEach","item","Key","Value","undefined","status","statusText","SetLoginCookies","LOGIN_COOKIE","REFRESH_TOKEN_COOKIE","SetCookie","GetCachedCredentials","GetCookie","ClearCachedCredentials","DeleteCookie","localStorage","keys","i","key","startsWith","push","removeItem","LoginUser","authenticationState","isAuthenticated","isAuthenticationError","isError","transientClient","user","loginError","clientBearerToken","ensureBearerToken","errorMessage","name","includes","mapClientCredentials","userDetails","GetUserDetails","latestCredentials","LogoutUser","_LoginHelper","withCookies","cookieHelper","userError","security","users","getCurrent","groupsError","groupsResult","getUserGroups","userId","includeInherited","pageOptions","pageSize","items","groups","log","loginSagas","takeEvery","LOGIN_USER","loginUserSaga","LOGOUT_USER","logoutUserSaga","VALIDATE_USER","validateUserSaga","SET_AUTHENTICATION_STATE","redirectAfterSuccessfulLoginSaga","handleRequiresLoginSaga","action","_entry$sys","entry","path","requireLogin","routes","staticRoute","userLoggedIn","select","selectUserIsAuthenticated","currentQs","queryParams","selectCurrentSearch","securitytoken","authRoute","route","authContentType","sys","routeRequiresGroups","Array","isArray","routeRequiresLogin","call","put","type","userGroups","selectUserGroups","groupMatch","matchUserGroup","login","isLoading","removeHostnamePart","relativePath","split","splice","join","isLoggedIn","ReturnURL","assetRedirectPath","setRoute","refreshSecurityToken","selectClientCredentials","Object","authenticate","loginUser","logoutUser","registerUser","mappers","REGISTER_USER","requestPasswordReset","userEmailObject","REQUEST_USER_PASSWORD_RESET","resetPassword","resetPasswordObject","RESET_USER_PASSWORD","changePassword","currentPassword","newPassword","CHANGE_USER_PASSWORD","useLogin","useCookies","dispatch","useDispatch","useSelector","selectUserErrorMessage","selectUserIsAuthenticationError","selectUserIsError","selectUserIsLoading","selectUser","authenticationError","authenticationErrorMessage","LoginContainer","children","props","userProps","propTypes","toJS","useRegistration","selectUserRegistrationError","selectUserRegistrationIsLoading","isSuccess","selectUserRegistrationIsSuccess","selectUserRegistration","RegistrationContainer","useForgotPassword","selectPasswordResetRequestSending","selectPasswordResetRequestSent","selectPasswordResetRequestError","setNewPassword","queryString","selectResetPasswordSending","selectResetPasswordSent","selectResetPasswordError","submit","ForgotPasswordContainer","useChangePassword","selectChangePasswordSending","selectChangePasswordSent","selectUserGuid","selectChangePasswordError","ChangePasswordContainer"],"mappings":"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"}